//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: grpcbin.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Grpcbin_GRPCBinServiceClient, then call methods of this protocol to make API calls.
internal protocol Grpcbin_GRPCBinService {
  func index(_ request: Grpcbin_EmptyMessage, callOptions: CallOptions?) -> UnaryCall<Grpcbin_EmptyMessage, Grpcbin_IndexReply>
  func empty(_ request: Grpcbin_EmptyMessage, callOptions: CallOptions?) -> UnaryCall<Grpcbin_EmptyMessage, Grpcbin_EmptyMessage>
  func dummyUnary(_ request: Grpcbin_DummyMessage, callOptions: CallOptions?) -> UnaryCall<Grpcbin_DummyMessage, Grpcbin_DummyMessage>
  func dummyServerStream(_ request: Grpcbin_DummyMessage, callOptions: CallOptions?, handler: @escaping (Grpcbin_DummyMessage) -> Void) -> ServerStreamingCall<Grpcbin_DummyMessage, Grpcbin_DummyMessage>
  func dummyClientStream(callOptions: CallOptions?) -> ClientStreamingCall<Grpcbin_DummyMessage, Grpcbin_DummyMessage>
  func dummyBidirectionalStreamStream(callOptions: CallOptions?, handler: @escaping (Grpcbin_DummyMessage) -> Void) -> BidirectionalStreamingCall<Grpcbin_DummyMessage, Grpcbin_DummyMessage>
  func specificError(_ request: Grpcbin_SpecificErrorRequest, callOptions: CallOptions?) -> UnaryCall<Grpcbin_SpecificErrorRequest, Grpcbin_EmptyMessage>
  func randomError(_ request: Grpcbin_EmptyMessage, callOptions: CallOptions?) -> UnaryCall<Grpcbin_EmptyMessage, Grpcbin_EmptyMessage>
  func headersUnary(_ request: Grpcbin_EmptyMessage, callOptions: CallOptions?) -> UnaryCall<Grpcbin_EmptyMessage, Grpcbin_HeadersMessage>
  func noResponseUnary(_ request: Grpcbin_EmptyMessage, callOptions: CallOptions?) -> UnaryCall<Grpcbin_EmptyMessage, Grpcbin_EmptyMessage>
}

internal final class Grpcbin_GRPCBinServiceClient: GRPCServiceClient, Grpcbin_GRPCBinService {
  internal let connection: ClientConnection
  internal var serviceName: String { return "grpcbin.GRPCBin" }
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the grpcbin.GRPCBin service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to Index.
  ///
  /// - Parameters:
  ///   - request: Request to send to Index.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func index(_ request: Grpcbin_EmptyMessage, callOptions: CallOptions? = nil) -> UnaryCall<Grpcbin_EmptyMessage, Grpcbin_IndexReply> {
    return self.makeUnaryCall(path: self.path(forMethod: "Index"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to Empty.
  ///
  /// - Parameters:
  ///   - request: Request to send to Empty.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func empty(_ request: Grpcbin_EmptyMessage, callOptions: CallOptions? = nil) -> UnaryCall<Grpcbin_EmptyMessage, Grpcbin_EmptyMessage> {
    return self.makeUnaryCall(path: self.path(forMethod: "Empty"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to DummyUnary.
  ///
  /// - Parameters:
  ///   - request: Request to send to DummyUnary.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dummyUnary(_ request: Grpcbin_DummyMessage, callOptions: CallOptions? = nil) -> UnaryCall<Grpcbin_DummyMessage, Grpcbin_DummyMessage> {
    return self.makeUnaryCall(path: self.path(forMethod: "DummyUnary"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous server-streaming call to DummyServerStream.
  ///
  /// - Parameters:
  ///   - request: Request to send to DummyServerStream.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func dummyServerStream(_ request: Grpcbin_DummyMessage, callOptions: CallOptions? = nil, handler: @escaping (Grpcbin_DummyMessage) -> Void) -> ServerStreamingCall<Grpcbin_DummyMessage, Grpcbin_DummyMessage> {
    return self.makeServerStreamingCall(path: self.path(forMethod: "DummyServerStream"),
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous client-streaming call to DummyClientStream.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func dummyClientStream(callOptions: CallOptions? = nil) -> ClientStreamingCall<Grpcbin_DummyMessage, Grpcbin_DummyMessage> {
    return self.makeClientStreamingCall(path: self.path(forMethod: "DummyClientStream"),
                                        callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous bidirectional-streaming call to DummyBidirectionalStreamStream.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func dummyBidirectionalStreamStream(callOptions: CallOptions? = nil, handler: @escaping (Grpcbin_DummyMessage) -> Void) -> BidirectionalStreamingCall<Grpcbin_DummyMessage, Grpcbin_DummyMessage> {
    return self.makeBidirectionalStreamingCall(path: self.path(forMethod: "DummyBidirectionalStreamStream"),
                                               callOptions: callOptions ?? self.defaultCallOptions,
                                               handler: handler)
  }

  /// Asynchronous unary call to SpecificError.
  ///
  /// - Parameters:
  ///   - request: Request to send to SpecificError.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func specificError(_ request: Grpcbin_SpecificErrorRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grpcbin_SpecificErrorRequest, Grpcbin_EmptyMessage> {
    return self.makeUnaryCall(path: self.path(forMethod: "SpecificError"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to RandomError.
  ///
  /// - Parameters:
  ///   - request: Request to send to RandomError.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func randomError(_ request: Grpcbin_EmptyMessage, callOptions: CallOptions? = nil) -> UnaryCall<Grpcbin_EmptyMessage, Grpcbin_EmptyMessage> {
    return self.makeUnaryCall(path: self.path(forMethod: "RandomError"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to HeadersUnary.
  ///
  /// - Parameters:
  ///   - request: Request to send to HeadersUnary.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func headersUnary(_ request: Grpcbin_EmptyMessage, callOptions: CallOptions? = nil) -> UnaryCall<Grpcbin_EmptyMessage, Grpcbin_HeadersMessage> {
    return self.makeUnaryCall(path: self.path(forMethod: "HeadersUnary"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to NoResponseUnary.
  ///
  /// - Parameters:
  ///   - request: Request to send to NoResponseUnary.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func noResponseUnary(_ request: Grpcbin_EmptyMessage, callOptions: CallOptions? = nil) -> UnaryCall<Grpcbin_EmptyMessage, Grpcbin_EmptyMessage> {
    return self.makeUnaryCall(path: self.path(forMethod: "NoResponseUnary"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Grpcbin_GRPCBinProvider: CallHandlerProvider {
  func index(request: Grpcbin_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Grpcbin_IndexReply>
  func empty(request: Grpcbin_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Grpcbin_EmptyMessage>
  func dummyUnary(request: Grpcbin_DummyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Grpcbin_DummyMessage>
  func dummyServerStream(request: Grpcbin_DummyMessage, context: StreamingResponseCallContext<Grpcbin_DummyMessage>) -> EventLoopFuture<GRPCStatus>
  func dummyClientStream(context: UnaryResponseCallContext<Grpcbin_DummyMessage>) -> EventLoopFuture<(StreamEvent<Grpcbin_DummyMessage>) -> Void>
  func dummyBidirectionalStreamStream(context: StreamingResponseCallContext<Grpcbin_DummyMessage>) -> EventLoopFuture<(StreamEvent<Grpcbin_DummyMessage>) -> Void>
  func specificError(request: Grpcbin_SpecificErrorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpcbin_EmptyMessage>
  func randomError(request: Grpcbin_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Grpcbin_EmptyMessage>
  func headersUnary(request: Grpcbin_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Grpcbin_HeadersMessage>
  func noResponseUnary(request: Grpcbin_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Grpcbin_EmptyMessage>
}

extension Grpcbin_GRPCBinProvider {
  internal var serviceName: String { return "grpcbin.GRPCBin" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: String, request: HTTPRequestHead, serverHandler: GRPCChannelHandler, channel: Channel, errorDelegate: ServerErrorDelegate?) -> GRPCCallHandler? {
    switch methodName {
    case "Index":
      return UnaryCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return { request in
          self.index(request: request, context: context)
        }
      }

    case "Empty":
      return UnaryCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return { request in
          self.empty(request: request, context: context)
        }
      }

    case "DummyUnary":
      return UnaryCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return { request in
          self.dummyUnary(request: request, context: context)
        }
      }

    case "DummyServerStream":
      return ServerStreamingCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return { request in
          self.dummyServerStream(request: request, context: context)
        }
      }

    case "DummyClientStream":
      return ClientStreamingCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return self.dummyClientStream(context: context)
      }

    case "DummyBidirectionalStreamStream":
      return BidirectionalStreamingCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return self.dummyBidirectionalStreamStream(context: context)
      }

    case "SpecificError":
      return UnaryCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return { request in
          self.specificError(request: request, context: context)
        }
      }

    case "RandomError":
      return UnaryCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return { request in
          self.randomError(request: request, context: context)
        }
      }

    case "HeadersUnary":
      return UnaryCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return { request in
          self.headersUnary(request: request, context: context)
        }
      }

    case "NoResponseUnary":
      return UnaryCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return { request in
          self.noResponseUnary(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

