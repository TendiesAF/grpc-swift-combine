//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: test_scenarios.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate UnaryScenariosServiceClient, then call methods of this protocol to make API calls.
internal protocol UnaryScenariosService {
  func unaryOk(_ request: Request, callOptions: CallOptions?) -> UnaryCall<Request, Response>
  func unaryUnimplemented(_ request: Empty, callOptions: CallOptions?) -> UnaryCall<Empty, Empty>
  func unaryFailedPrecondition(_ request: Request, callOptions: CallOptions?) -> UnaryCall<Request, Empty>
  func unaryNoResponse(_ request: Request, callOptions: CallOptions?) -> UnaryCall<Request, Empty>
}

internal final class UnaryScenariosServiceClient: GRPCServiceClient, UnaryScenariosService {
  internal let connection: ClientConnection
  internal var serviceName: String { return "UnaryScenarios" }
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the UnaryScenarios service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to UnaryOk.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnaryOk.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unaryOk(_ request: Request, callOptions: CallOptions? = nil) -> UnaryCall<Request, Response> {
    return self.makeUnaryCall(path: self.path(forMethod: "UnaryOk"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to UnaryUnimplemented.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnaryUnimplemented.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unaryUnimplemented(_ request: Empty, callOptions: CallOptions? = nil) -> UnaryCall<Empty, Empty> {
    return self.makeUnaryCall(path: self.path(forMethod: "UnaryUnimplemented"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to UnaryFailedPrecondition.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnaryFailedPrecondition.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unaryFailedPrecondition(_ request: Request, callOptions: CallOptions? = nil) -> UnaryCall<Request, Empty> {
    return self.makeUnaryCall(path: self.path(forMethod: "UnaryFailedPrecondition"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to UnaryNoResponse.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnaryNoResponse.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unaryNoResponse(_ request: Request, callOptions: CallOptions? = nil) -> UnaryCall<Request, Empty> {
    return self.makeUnaryCall(path: self.path(forMethod: "UnaryNoResponse"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// Usage: instantiate ClientStreamingScenariosServiceClient, then call methods of this protocol to make API calls.
internal protocol ClientStreamingScenariosService {
  func clientStreamOk(callOptions: CallOptions?) -> ClientStreamingCall<Request, Response>
  func clientStreamFailedPrecondition(callOptions: CallOptions?) -> ClientStreamingCall<Request, Empty>
  func clientStreamNoResponse(callOptions: CallOptions?) -> ClientStreamingCall<Request, Empty>
}

internal final class ClientStreamingScenariosServiceClient: GRPCServiceClient, ClientStreamingScenariosService {
  internal let connection: ClientConnection
  internal var serviceName: String { return "ClientStreamingScenarios" }
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the ClientStreamingScenarios service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous client-streaming call to ClientStreamOk.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func clientStreamOk(callOptions: CallOptions? = nil) -> ClientStreamingCall<Request, Response> {
    return self.makeClientStreamingCall(path: self.path(forMethod: "ClientStreamOk"),
                                        callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous client-streaming call to ClientStreamFailedPrecondition.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func clientStreamFailedPrecondition(callOptions: CallOptions? = nil) -> ClientStreamingCall<Request, Empty> {
    return self.makeClientStreamingCall(path: self.path(forMethod: "ClientStreamFailedPrecondition"),
                                        callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous client-streaming call to ClientStreamNoResponse.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func clientStreamNoResponse(callOptions: CallOptions? = nil) -> ClientStreamingCall<Request, Empty> {
    return self.makeClientStreamingCall(path: self.path(forMethod: "ClientStreamNoResponse"),
                                        callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// Usage: instantiate ServerStreamingScenariosServiceClient, then call methods of this protocol to make API calls.
internal protocol ServerStreamingScenariosService {
  func serverStreamOk(_ request: Request, callOptions: CallOptions?, handler: @escaping (Response) -> Void) -> ServerStreamingCall<Request, Response>
  func serverStreamFailedPrecondition(_ request: Request, callOptions: CallOptions?, handler: @escaping (Empty) -> Void) -> ServerStreamingCall<Request, Empty>
  func serverStreamNoResponse(_ request: Request, callOptions: CallOptions?, handler: @escaping (Empty) -> Void) -> ServerStreamingCall<Request, Empty>
}

internal final class ServerStreamingScenariosServiceClient: GRPCServiceClient, ServerStreamingScenariosService {
  internal let connection: ClientConnection
  internal var serviceName: String { return "ServerStreamingScenarios" }
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the ServerStreamingScenarios service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous server-streaming call to ServerStreamOk.
  ///
  /// - Parameters:
  ///   - request: Request to send to ServerStreamOk.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func serverStreamOk(_ request: Request, callOptions: CallOptions? = nil, handler: @escaping (Response) -> Void) -> ServerStreamingCall<Request, Response> {
    return self.makeServerStreamingCall(path: self.path(forMethod: "ServerStreamOk"),
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous server-streaming call to ServerStreamFailedPrecondition.
  ///
  /// - Parameters:
  ///   - request: Request to send to ServerStreamFailedPrecondition.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func serverStreamFailedPrecondition(_ request: Request, callOptions: CallOptions? = nil, handler: @escaping (Empty) -> Void) -> ServerStreamingCall<Request, Empty> {
    return self.makeServerStreamingCall(path: self.path(forMethod: "ServerStreamFailedPrecondition"),
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous server-streaming call to ServerStreamNoResponse.
  ///
  /// - Parameters:
  ///   - request: Request to send to ServerStreamNoResponse.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func serverStreamNoResponse(_ request: Request, callOptions: CallOptions? = nil, handler: @escaping (Empty) -> Void) -> ServerStreamingCall<Request, Empty> {
    return self.makeServerStreamingCall(path: self.path(forMethod: "ServerStreamNoResponse"),
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

}

/// Usage: instantiate BidirectionalStreamingScenariosServiceClient, then call methods of this protocol to make API calls.
internal protocol BidirectionalStreamingScenariosService {
  func bidirectionalStreamOk(callOptions: CallOptions?, handler: @escaping (Response) -> Void) -> BidirectionalStreamingCall<Request, Response>
  func bidirectionalStreamFailedPrecondition(callOptions: CallOptions?, handler: @escaping (Empty) -> Void) -> BidirectionalStreamingCall<Request, Empty>
  func bidirectionalStreamNoResponse(callOptions: CallOptions?, handler: @escaping (Empty) -> Void) -> BidirectionalStreamingCall<Request, Empty>
}

internal final class BidirectionalStreamingScenariosServiceClient: GRPCServiceClient, BidirectionalStreamingScenariosService {
  internal let connection: ClientConnection
  internal var serviceName: String { return "BidirectionalStreamingScenarios" }
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the BidirectionalStreamingScenarios service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous bidirectional-streaming call to BidirectionalStreamOk.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func bidirectionalStreamOk(callOptions: CallOptions? = nil, handler: @escaping (Response) -> Void) -> BidirectionalStreamingCall<Request, Response> {
    return self.makeBidirectionalStreamingCall(path: self.path(forMethod: "BidirectionalStreamOk"),
                                               callOptions: callOptions ?? self.defaultCallOptions,
                                               handler: handler)
  }

  /// Asynchronous bidirectional-streaming call to BidirectionalStreamFailedPrecondition.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func bidirectionalStreamFailedPrecondition(callOptions: CallOptions? = nil, handler: @escaping (Empty) -> Void) -> BidirectionalStreamingCall<Request, Empty> {
    return self.makeBidirectionalStreamingCall(path: self.path(forMethod: "BidirectionalStreamFailedPrecondition"),
                                               callOptions: callOptions ?? self.defaultCallOptions,
                                               handler: handler)
  }

  /// Asynchronous bidirectional-streaming call to BidirectionalStreamNoResponse.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func bidirectionalStreamNoResponse(callOptions: CallOptions? = nil, handler: @escaping (Empty) -> Void) -> BidirectionalStreamingCall<Request, Empty> {
    return self.makeBidirectionalStreamingCall(path: self.path(forMethod: "BidirectionalStreamNoResponse"),
                                               callOptions: callOptions ?? self.defaultCallOptions,
                                               handler: handler)
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol UnaryScenariosProvider: CallHandlerProvider {
  func unaryOk(request: Request, context: StatusOnlyCallContext) -> EventLoopFuture<Response>
  func unaryUnimplemented(request: Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Empty>
  func unaryFailedPrecondition(request: Request, context: StatusOnlyCallContext) -> EventLoopFuture<Empty>
  func unaryNoResponse(request: Request, context: StatusOnlyCallContext) -> EventLoopFuture<Empty>
}

extension UnaryScenariosProvider {
  internal var serviceName: String { return "UnaryScenarios" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: String, request: HTTPRequestHead, serverHandler: GRPCChannelHandler, channel: Channel, errorDelegate: ServerErrorDelegate?) -> GRPCCallHandler? {
    switch methodName {
    case "UnaryOk":
      return UnaryCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return { request in
          self.unaryOk(request: request, context: context)
        }
      }

    case "UnaryUnimplemented":
      return UnaryCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return { request in
          self.unaryUnimplemented(request: request, context: context)
        }
      }

    case "UnaryFailedPrecondition":
      return UnaryCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return { request in
          self.unaryFailedPrecondition(request: request, context: context)
        }
      }

    case "UnaryNoResponse":
      return UnaryCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return { request in
          self.unaryNoResponse(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol ClientStreamingScenariosProvider: CallHandlerProvider {
  func clientStreamOk(context: UnaryResponseCallContext<Response>) -> EventLoopFuture<(StreamEvent<Request>) -> Void>
  func clientStreamFailedPrecondition(context: UnaryResponseCallContext<Empty>) -> EventLoopFuture<(StreamEvent<Request>) -> Void>
  func clientStreamNoResponse(context: UnaryResponseCallContext<Empty>) -> EventLoopFuture<(StreamEvent<Request>) -> Void>
}

extension ClientStreamingScenariosProvider {
  internal var serviceName: String { return "ClientStreamingScenarios" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: String, request: HTTPRequestHead, serverHandler: GRPCChannelHandler, channel: Channel, errorDelegate: ServerErrorDelegate?) -> GRPCCallHandler? {
    switch methodName {
    case "ClientStreamOk":
      return ClientStreamingCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return self.clientStreamOk(context: context)
      }

    case "ClientStreamFailedPrecondition":
      return ClientStreamingCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return self.clientStreamFailedPrecondition(context: context)
      }

    case "ClientStreamNoResponse":
      return ClientStreamingCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return self.clientStreamNoResponse(context: context)
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol ServerStreamingScenariosProvider: CallHandlerProvider {
  func serverStreamOk(request: Request, context: StreamingResponseCallContext<Response>) -> EventLoopFuture<GRPCStatus>
  func serverStreamFailedPrecondition(request: Request, context: StreamingResponseCallContext<Empty>) -> EventLoopFuture<GRPCStatus>
  func serverStreamNoResponse(request: Request, context: StreamingResponseCallContext<Empty>) -> EventLoopFuture<GRPCStatus>
}

extension ServerStreamingScenariosProvider {
  internal var serviceName: String { return "ServerStreamingScenarios" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: String, request: HTTPRequestHead, serverHandler: GRPCChannelHandler, channel: Channel, errorDelegate: ServerErrorDelegate?) -> GRPCCallHandler? {
    switch methodName {
    case "ServerStreamOk":
      return ServerStreamingCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return { request in
          self.serverStreamOk(request: request, context: context)
        }
      }

    case "ServerStreamFailedPrecondition":
      return ServerStreamingCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return { request in
          self.serverStreamFailedPrecondition(request: request, context: context)
        }
      }

    case "ServerStreamNoResponse":
      return ServerStreamingCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return { request in
          self.serverStreamNoResponse(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol BidirectionalStreamingScenariosProvider: CallHandlerProvider {
  func bidirectionalStreamOk(context: StreamingResponseCallContext<Response>) -> EventLoopFuture<(StreamEvent<Request>) -> Void>
  func bidirectionalStreamFailedPrecondition(context: StreamingResponseCallContext<Empty>) -> EventLoopFuture<(StreamEvent<Request>) -> Void>
  func bidirectionalStreamNoResponse(context: StreamingResponseCallContext<Empty>) -> EventLoopFuture<(StreamEvent<Request>) -> Void>
}

extension BidirectionalStreamingScenariosProvider {
  internal var serviceName: String { return "BidirectionalStreamingScenarios" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: String, request: HTTPRequestHead, serverHandler: GRPCChannelHandler, channel: Channel, errorDelegate: ServerErrorDelegate?) -> GRPCCallHandler? {
    switch methodName {
    case "BidirectionalStreamOk":
      return BidirectionalStreamingCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return self.bidirectionalStreamOk(context: context)
      }

    case "BidirectionalStreamFailedPrecondition":
      return BidirectionalStreamingCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return self.bidirectionalStreamFailedPrecondition(context: context)
      }

    case "BidirectionalStreamNoResponse":
      return BidirectionalStreamingCallHandler(channel: channel, request: request, errorDelegate: errorDelegate) { context in
        return self.bidirectionalStreamNoResponse(context: context)
      }

    default: return nil
    }
  }
}

