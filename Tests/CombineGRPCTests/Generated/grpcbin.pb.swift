// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: grpcbin.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Grpcbin_HeadersMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Dictionary<String,Grpcbin_HeadersMessage.Values> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Values {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var values: [String] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct Grpcbin_SpecificErrorRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: UInt32 = 0

  var reason: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Grpcbin_EmptyMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Grpcbin_DummyMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fString: String {
    get {return _storage._fString}
    set {_uniqueStorage()._fString = newValue}
  }

  var fStrings: [String] {
    get {return _storage._fStrings}
    set {_uniqueStorage()._fStrings = newValue}
  }

  var fInt32: Int32 {
    get {return _storage._fInt32}
    set {_uniqueStorage()._fInt32 = newValue}
  }

  var fInt32S: [Int32] {
    get {return _storage._fInt32S}
    set {_uniqueStorage()._fInt32S = newValue}
  }

  var fEnum: Grpcbin_DummyMessage.Enum {
    get {return _storage._fEnum}
    set {_uniqueStorage()._fEnum = newValue}
  }

  var fEnums: [Grpcbin_DummyMessage.Enum] {
    get {return _storage._fEnums}
    set {_uniqueStorage()._fEnums = newValue}
  }

  var fSub: Grpcbin_DummyMessage.Sub {
    get {return _storage._fSub ?? Grpcbin_DummyMessage.Sub()}
    set {_uniqueStorage()._fSub = newValue}
  }
  /// Returns true if `fSub` has been explicitly set.
  var hasFSub: Bool {return _storage._fSub != nil}
  /// Clears the value of `fSub`. Subsequent reads from it will return its default value.
  mutating func clearFSub() {_uniqueStorage()._fSub = nil}

  var fSubs: [Grpcbin_DummyMessage.Sub] {
    get {return _storage._fSubs}
    set {_uniqueStorage()._fSubs = newValue}
  }

  var fBool: Bool {
    get {return _storage._fBool}
    set {_uniqueStorage()._fBool = newValue}
  }

  var fBools: [Bool] {
    get {return _storage._fBools}
    set {_uniqueStorage()._fBools = newValue}
  }

  var fInt64: Int64 {
    get {return _storage._fInt64}
    set {_uniqueStorage()._fInt64 = newValue}
  }

  var fInt64S: [Int64] {
    get {return _storage._fInt64S}
    set {_uniqueStorage()._fInt64S = newValue}
  }

  var fBytes: Data {
    get {return _storage._fBytes}
    set {_uniqueStorage()._fBytes = newValue}
  }

  var fBytess: [Data] {
    get {return _storage._fBytess}
    set {_uniqueStorage()._fBytess = newValue}
  }

  var fFloat: Float {
    get {return _storage._fFloat}
    set {_uniqueStorage()._fFloat = newValue}
  }

  /// TODO: timestamp, duration, oneof, any, maps, fieldmask, wrapper type, struct, listvalue, value, nullvalue, deprecated
  var fFloats: [Float] {
    get {return _storage._fFloats}
    set {_uniqueStorage()._fFloats = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Enum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case enum0 // = 0
    case enum1 // = 1
    case enum2 // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .enum0
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .enum0
      case 1: self = .enum1
      case 2: self = .enum2
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .enum0: return 0
      case .enum1: return 1
      case .enum2: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct Sub {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fString: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Grpcbin_DummyMessage.Enum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Grpcbin_DummyMessage.Enum] = [
    .enum0,
    .enum1,
    .enum2,
  ]
}

#endif  // swift(>=4.2)

struct Grpcbin_IndexReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var description_p: String = String()

  var endpoints: [Grpcbin_IndexReply.Endpoint] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Endpoint {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var path: String = String()

    var description_p: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "grpcbin"

extension Grpcbin_HeadersMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HeadersMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Metadata"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Grpcbin_HeadersMessage.Values>.self, value: &self.metadata)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.metadata.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Grpcbin_HeadersMessage.Values>.self, value: self.metadata, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpcbin_HeadersMessage, rhs: Grpcbin_HeadersMessage) -> Bool {
    if lhs.metadata != rhs.metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpcbin_HeadersMessage.Values: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Grpcbin_HeadersMessage.protoMessageName + ".Values"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.values)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedStringField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpcbin_HeadersMessage.Values, rhs: Grpcbin_HeadersMessage.Values) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpcbin_SpecificErrorRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecificErrorRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "reason"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.reason)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularUInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpcbin_SpecificErrorRequest, rhs: Grpcbin_SpecificErrorRequest) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpcbin_EmptyMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EmptyMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpcbin_EmptyMessage, rhs: Grpcbin_EmptyMessage) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpcbin_DummyMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DummyMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "f_string"),
    2: .standard(proto: "f_strings"),
    3: .standard(proto: "f_int32"),
    4: .standard(proto: "f_int32s"),
    5: .standard(proto: "f_enum"),
    6: .standard(proto: "f_enums"),
    7: .standard(proto: "f_sub"),
    8: .standard(proto: "f_subs"),
    9: .standard(proto: "f_bool"),
    10: .standard(proto: "f_bools"),
    11: .standard(proto: "f_int64"),
    12: .standard(proto: "f_int64s"),
    13: .standard(proto: "f_bytes"),
    14: .standard(proto: "f_bytess"),
    15: .standard(proto: "f_float"),
    16: .standard(proto: "f_floats"),
  ]

  fileprivate class _StorageClass {
    var _fString: String = String()
    var _fStrings: [String] = []
    var _fInt32: Int32 = 0
    var _fInt32S: [Int32] = []
    var _fEnum: Grpcbin_DummyMessage.Enum = .enum0
    var _fEnums: [Grpcbin_DummyMessage.Enum] = []
    var _fSub: Grpcbin_DummyMessage.Sub? = nil
    var _fSubs: [Grpcbin_DummyMessage.Sub] = []
    var _fBool: Bool = false
    var _fBools: [Bool] = []
    var _fInt64: Int64 = 0
    var _fInt64S: [Int64] = []
    var _fBytes: Data = SwiftProtobuf.Internal.emptyData
    var _fBytess: [Data] = []
    var _fFloat: Float = 0
    var _fFloats: [Float] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _fString = source._fString
      _fStrings = source._fStrings
      _fInt32 = source._fInt32
      _fInt32S = source._fInt32S
      _fEnum = source._fEnum
      _fEnums = source._fEnums
      _fSub = source._fSub
      _fSubs = source._fSubs
      _fBool = source._fBool
      _fBools = source._fBools
      _fInt64 = source._fInt64
      _fInt64S = source._fInt64S
      _fBytes = source._fBytes
      _fBytess = source._fBytess
      _fFloat = source._fFloat
      _fFloats = source._fFloats
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._fString)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._fStrings)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._fInt32)
        case 4: try decoder.decodeRepeatedInt32Field(value: &_storage._fInt32S)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._fEnum)
        case 6: try decoder.decodeRepeatedEnumField(value: &_storage._fEnums)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._fSub)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._fSubs)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._fBool)
        case 10: try decoder.decodeRepeatedBoolField(value: &_storage._fBools)
        case 11: try decoder.decodeSingularInt64Field(value: &_storage._fInt64)
        case 12: try decoder.decodeRepeatedInt64Field(value: &_storage._fInt64S)
        case 13: try decoder.decodeSingularBytesField(value: &_storage._fBytes)
        case 14: try decoder.decodeRepeatedBytesField(value: &_storage._fBytess)
        case 15: try decoder.decodeSingularFloatField(value: &_storage._fFloat)
        case 16: try decoder.decodeRepeatedFloatField(value: &_storage._fFloats)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._fString.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fString, fieldNumber: 1)
      }
      if !_storage._fStrings.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._fStrings, fieldNumber: 2)
      }
      if _storage._fInt32 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fInt32, fieldNumber: 3)
      }
      if !_storage._fInt32S.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._fInt32S, fieldNumber: 4)
      }
      if _storage._fEnum != .enum0 {
        try visitor.visitSingularEnumField(value: _storage._fEnum, fieldNumber: 5)
      }
      if !_storage._fEnums.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._fEnums, fieldNumber: 6)
      }
      if let v = _storage._fSub {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._fSubs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._fSubs, fieldNumber: 8)
      }
      if _storage._fBool != false {
        try visitor.visitSingularBoolField(value: _storage._fBool, fieldNumber: 9)
      }
      if !_storage._fBools.isEmpty {
        try visitor.visitPackedBoolField(value: _storage._fBools, fieldNumber: 10)
      }
      if _storage._fInt64 != 0 {
        try visitor.visitSingularInt64Field(value: _storage._fInt64, fieldNumber: 11)
      }
      if !_storage._fInt64S.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._fInt64S, fieldNumber: 12)
      }
      if !_storage._fBytes.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._fBytes, fieldNumber: 13)
      }
      if !_storage._fBytess.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._fBytess, fieldNumber: 14)
      }
      if _storage._fFloat != 0 {
        try visitor.visitSingularFloatField(value: _storage._fFloat, fieldNumber: 15)
      }
      if !_storage._fFloats.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._fFloats, fieldNumber: 16)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpcbin_DummyMessage, rhs: Grpcbin_DummyMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._fString != rhs_storage._fString {return false}
        if _storage._fStrings != rhs_storage._fStrings {return false}
        if _storage._fInt32 != rhs_storage._fInt32 {return false}
        if _storage._fInt32S != rhs_storage._fInt32S {return false}
        if _storage._fEnum != rhs_storage._fEnum {return false}
        if _storage._fEnums != rhs_storage._fEnums {return false}
        if _storage._fSub != rhs_storage._fSub {return false}
        if _storage._fSubs != rhs_storage._fSubs {return false}
        if _storage._fBool != rhs_storage._fBool {return false}
        if _storage._fBools != rhs_storage._fBools {return false}
        if _storage._fInt64 != rhs_storage._fInt64 {return false}
        if _storage._fInt64S != rhs_storage._fInt64S {return false}
        if _storage._fBytes != rhs_storage._fBytes {return false}
        if _storage._fBytess != rhs_storage._fBytess {return false}
        if _storage._fFloat != rhs_storage._fFloat {return false}
        if _storage._fFloats != rhs_storage._fFloats {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpcbin_DummyMessage.Enum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENUM_0"),
    1: .same(proto: "ENUM_1"),
    2: .same(proto: "ENUM_2"),
  ]
}

extension Grpcbin_DummyMessage.Sub: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Grpcbin_DummyMessage.protoMessageName + ".Sub"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "f_string"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.fString)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fString.isEmpty {
      try visitor.visitSingularStringField(value: self.fString, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpcbin_DummyMessage.Sub, rhs: Grpcbin_DummyMessage.Sub) -> Bool {
    if lhs.fString != rhs.fString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpcbin_IndexReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IndexReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "endpoints"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.description_p)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.endpoints)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 1)
    }
    if !self.endpoints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.endpoints, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpcbin_IndexReply, rhs: Grpcbin_IndexReply) -> Bool {
    if lhs.description_p != rhs.description_p {return false}
    if lhs.endpoints != rhs.endpoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpcbin_IndexReply.Endpoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Grpcbin_IndexReply.protoMessageName + ".Endpoint"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.path)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpcbin_IndexReply.Endpoint, rhs: Grpcbin_IndexReply.Endpoint) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
